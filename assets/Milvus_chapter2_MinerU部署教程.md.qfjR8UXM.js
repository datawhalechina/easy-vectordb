import{_ as a,c as n,o as e,ag as i}from"./chunks/framework.iC72KZN-.js";const b=JSON.parse('{"title":"MinerU部署教程","description":"","frontmatter":{},"headers":[],"relativePath":"Milvus/chapter2/MinerU部署教程.md","filePath":"Milvus/chapter2/MinerU部署教程.md","lastUpdated":1751979887000}'),p={name:"Milvus/chapter2/MinerU部署教程.md"};function l(t,s,r,d,o,h){return e(),n("div",null,[...s[0]||(s[0]=[i(`<h1 id="mineru部署教程" tabindex="-1">MinerU部署教程 <a class="header-anchor" href="#mineru部署教程" aria-label="Permalink to &quot;MinerU部署教程&quot;">​</a></h1><blockquote><p>教程参考：<a href="https://mp.weixin.qq.com/s/ylVXT0dB_tcDG6zFPmwo8A" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/ylVXT0dB_tcDG6zFPmwo8A</a></p></blockquote><h2 id="什么是mineru" tabindex="-1">什么是MinerU？ <a class="header-anchor" href="#什么是mineru" aria-label="Permalink to &quot;什么是MinerU？&quot;">​</a></h2><p>MinerU是一款由上海人工智能实验室 OpenDataLab 团队开发的开源 PDF 转 Markdown 工具，可以高质量地提取 PDF 文档内容，生成结构化的 Markdown 格式文本，可用于RAG、LLM语料准备等场景。</p><blockquote><p>笔者记，笔者根据自己的实际使用体验来看，MinerU在文档解析上准确度很高，同时开源部署，非常适合学习使用</p></blockquote><p><strong>官方客户端</strong>：</p><p><em><a href="https://mineru.net/" target="_blank" rel="noreferrer">https://mineru.net/</a></em></p><p><strong>MinerU Readme 地址（中文）：</strong></p><p><em><a href="https://github.com/opendatalab/MinerU/blob/master/README_zh-CN.md" target="_blank" rel="noreferrer">https://github.com/opendatalab/MinerU/blob/master/README_zh-CN.md</a></em></p><p>MinerU 仓库文档说明</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MinerU/</span></span>
<span class="line"><span>├── demo/                # 用于运行转换演示的脚本</span></span>
<span class="line"><span>├── docker/              # 用于容器化的 Dockerfile 配置文件</span></span>
<span class="line"><span>├── docs/                # 存储各类说明文档</span></span>
<span class="line"><span>├── projects/            # 存放由 MinerU 衍生或相关的项目</span></span>
<span class="line"><span>│   ├── gradio_app/        # MinerU Gradio 界面的源代码</span></span>
<span class="line"><span>│   ├── multi_gpu/         # 为 MinerU 提供多 GPU 支持的解决方案</span></span>
<span class="line"><span>│   ├── web_api/           # 提供本地 Web API 接口的服务端代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="mineru-功能特性" tabindex="-1">MinerU 功能特性 <a class="header-anchor" href="#mineru-功能特性" aria-label="Permalink to &quot;MinerU 功能特性&quot;">​</a></h2><p>MinerU具有以下核心功能：</p><p><strong>1. 文档处理</strong></p><p>● 删除页眉、页脚、脚注、页码等元素，确保语义连贯</p><p>● 保留原文档的结构，包括标题、段落、列表等</p><p>● 提取图像、图片描述、表格、表格标题及脚注</p><p><strong>2. 格式转换</strong></p><p>● 自动识别并转换文档中的公式为LaTeX格式</p><p>● 自动识别并转换文档中的表格为HTML格式</p><p><strong>3. 运行环境</strong></p><p>● 支持纯 CPU 环境运行</p><p>● 支持 GPU 加速，提升处理效率</p><h2 id="本地部署系统要求" tabindex="-1">本地部署系统要求 <a class="header-anchor" href="#本地部署系统要求" aria-label="Permalink to &quot;本地部署系统要求&quot;">​</a></h2><p>在开始安装前，请确保您的系统满足以下要求：</p><h3 id="基础环境" tabindex="-1"><strong>基础环境</strong> <a class="header-anchor" href="#基础环境" aria-label="Permalink to &quot;**基础环境**&quot;">​</a></h3><p>● Python 3.10～3.13</p><p>● Conda（包管理器）</p><h3 id="gpu加速要求" tabindex="-1">GPU加速要求 <a class="header-anchor" href="#gpu加速要求" aria-label="Permalink to &quot;GPU加速要求&quot;">​</a></h3><p>● NVIDIA显卡（显存≥6GB）</p><p>基础环境配置推荐：</p><h1 id="安装教程" tabindex="-1">安装教程 <a class="header-anchor" href="#安装教程" aria-label="Permalink to &quot;安装教程&quot;">​</a></h1><h2 id="_1-环境配置" tabindex="-1">1.环境配置 <a class="header-anchor" href="#_1-环境配置" aria-label="Permalink to &quot;1.环境配置&quot;">​</a></h2><h3 id="_1-1-创建conda环境" tabindex="-1"><strong>1.1 创建Conda环境</strong> <a class="header-anchor" href="#_1-1-创建conda环境" aria-label="Permalink to &quot;**1.1 创建Conda环境**&quot;">​</a></h3><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conda create </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n mineru </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;python=3.12&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conda activate mineru</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pip install </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;magic-pdf[full]&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i https:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mirrors.aliyun.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pypi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">simple </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#-i 是指定国内的加速源，可选清华源或阿里云源，此处用阿里云源示例</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_1-2-下载模型文件" tabindex="-1"><strong>1.2 下载模型文件</strong> <a class="header-anchor" href="#_1-2-下载模型文件" aria-label="Permalink to &quot;**1.2 下载模型文件**&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>方法一：从Hugging Face下载模型（国际用户推荐）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pip install huggingface_hub</span></span>
<span class="line"><span>curl -o download_models_hf.py https://gcore.jsdelivr.net/gh/opendatalab/MinerU@master/scripts/download_models_hf.py</span></span>
<span class="line"><span>python download_models_hf.py</span></span>
<span class="line"><span></span></span>
<span class="line"><span>方法二：从ModelScope下载模型（国内用户推荐）</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pip install modelscope </span></span>
<span class="line"><span>curl -o download_models.py https://gcore.jsdelivr.net/gh/opendatalab/MinerU@master/scripts/download_models.py</span></span>
<span class="line"><span>python download_models.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>模型默认存储路径示例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>model_dir: C:\\Users\\用户名\\.cache\\modelscope\\hub\\models\\opendatalab\\PDF-Extract-Kit-1___0/models</span></span>
<span class="line"><span>layoutreader_model_dir: C:\\Users\\用户名\\.cache\\modelscope\\hub\\models\\ppaanngggg\\layoutreader</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>💡提示</strong>：</p><p>下载完成后，系统会自动在用户目录下生成 <code>magic-pdf.json </code>配置文件，你可以在这个配置文件中修改部分配置，实现不同功能的开关，如表格识别、公式识别关闭或开启（默认二者都是开启的，关闭只需将对应的值改 &#39;true&#39; 为 &#39;false&#39; ）。</p><p>用户目录位置：</p><p>● Windows：<code>C:\\Users\\用户名</code></p><p>● Linux：<code>/home/用户名</code></p><p>● macOS：<code>/Users/用户名</code></p><h2 id="_2-gpu加速配置" tabindex="-1"><strong>2.</strong> GPU加速配置 <a class="header-anchor" href="#_2-gpu加速配置" aria-label="Permalink to &quot;**2.** GPU加速配置&quot;">​</a></h2><h3 id="_2-1-cuda加速设置" tabindex="-1"><strong>2.1</strong> CUDA加速设置 <a class="header-anchor" href="#_2-1-cuda加速设置" aria-label="Permalink to &quot;**2.1** CUDA加速设置&quot;">​</a></h3><p>这里以 Windows（NVIDIA 显卡） 为例。如果您的 NVIDIA 显卡显存 ≥ 6GB，可配置 CUDA 加速。这里我们以 CUDA 12.8 安装为例：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pip install torch torchvision --index-url https://download.pytorch.org/whl/cu128</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>修改用户目录中配置文件 <code>magic-pdf.json </code>：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    // other config</span></span>
<span class="line"><span>    &quot;device-mode&quot;: &quot;cuda&quot;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-功能测试" tabindex="-1">3. 功能测试 <a class="header-anchor" href="#_3-功能测试" aria-label="Permalink to &quot;3. 功能测试&quot;">​</a></h2><h3 id="_3-1-单文件测试" tabindex="-1"><strong>3.1 单文件测试</strong> <a class="header-anchor" href="#_3-1-单文件测试" aria-label="Permalink to &quot;**3.1 单文件测试**&quot;">​</a></h3><p>执行以下命令自动测试功能：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd demo</span></span>
<span class="line"><span>magic-pdf -p demo1.pdf -o ./output</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-2-批量pdf转换" tabindex="-1">3.2 批量PDF转换 <a class="header-anchor" href="#_3-2-批量pdf转换" aria-label="Permalink to &quot;3.2 批量PDF转换&quot;">​</a></h3><p><strong>步骤 1：获取批量转换脚本</strong></p><p>下载名为 <code>batch_demo.py</code> 的 Python 文件。你可以将此文件保存在你希望执行转换的任何目录下。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>下载地址：https://github.com/opendatalab/MinerU/blob/master/demo/batch_demo.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>步骤 2：准备 PDF 文件</strong></p><p>在 <code>batch_demo.py</code> 文件的目录下新建如下文件夹：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pdfs  # batch_demo.py 相对于脚本的路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>步骤 3：执行批量转换：</strong></p><p>打开你的终端或命令提示符，导航到你保存 <code>batch_demo.py</code> 文件的目录。例如，如果你的 <code>batch_demo.py</code> 文件保存在 <code>demo</code> 文件夹中，你可以执行以下命令：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd demo</span></span>
<span class="line"><span>python batch_demo.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>步骤 4：查看转换结果：</strong></p><p>转换后的结果将默认输出到与 <code>batch_demo.py</code> 文件同级目录下的一个名为 <code>output</code> 的文件夹中。</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>output  # 相对于脚本的路径</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h1 id="搭建本地-api-服务" tabindex="-1">搭建本地 <strong>API</strong> 服务 <a class="header-anchor" href="#搭建本地-api-服务" aria-label="Permalink to &quot;搭建本地 **API** 服务&quot;">​</a></h1><blockquote><p>笔者记，推荐使用docker部署，方便运维，因此这里也只复制docker相关部署方法</p></blockquote><h3 id="docker安装方式" tabindex="-1"><strong>Docker安装方式</strong> <a class="header-anchor" href="#docker安装方式" aria-label="Permalink to &quot;**Docker安装方式**&quot;">​</a></h3><h4 id="步骤-1-构建方式" tabindex="-1"><strong>步骤 1：构建方式</strong> <a class="header-anchor" href="#步骤-1-构建方式" aria-label="Permalink to &quot;**步骤 1：构建方式**&quot;">​</a></h4><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker build </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t mineru</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">或者使用代理：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">docker build </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">build</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arg http_proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.0.1:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7890</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">build</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">arg https_proxy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">127.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.0.1:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7890</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t mineru</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">api .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="步骤-2-启动命令" tabindex="-1"><strong>步骤 2：启动命令</strong> <a class="header-anchor" href="#步骤-2-启动命令" aria-label="Permalink to &quot;**步骤 2：启动命令**&quot;">​</a></h4><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker run --rm -it --gpus=all -p 8000:8000 mineru-api</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上述任意一种方式安装完成后，可以通过如下地址访问（测试）</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://localhost:8000/docs</span></span>
<span class="line"><span>http://127.0.0.1:8000/docs</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,77)])])}const u=a(p,[["render",l]]);export{b as __pageData,u as default};
